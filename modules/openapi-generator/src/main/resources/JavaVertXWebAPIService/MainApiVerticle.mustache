package {{rootPackage}};

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.Vertx;
import io.vertx.core.eventbus.MessageConsumer;
import io.vertx.core.http.HttpServer;
import io.vertx.core.http.HttpServerOptions;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.api.contract.openapi3.OpenAPI3RouterFactory;
import io.vertx.serviceproxy.ServiceBinder;


{{#apiInfo}}{{#apis}}import {{apiPackage}}.{{classname}};
{{/apis}}{{/apiInfo}}

public class MainApiVerticle extends AbstractVerticle {

  HttpServer server;
{{#apiInfo}}{{#apis}}  ServiceBinder binder{{classname}};
{{/apis}}{{/apiInfo}}
{{#apiInfo}}{{#apis}}  MessageConsumer<JsonObject> consumer{{classname}};
{{/apis}}{{/apiInfo}}
{{#apiInfo}}{{#apis}}
  /**
  * Start {{classname}} service
  */
  private void start{{classname}}() {
    ServiceBinder binder{{classname}} = new ServiceBinder(vertx);

    // Create an instance of {{classname}} and mount to event bus
    {{classname}} service = {{classname}}.create();
    consumer{{classname}} = binder{{classname}}
    // --> {{x-vertx-event-bus}}
      .setAddress("{{classname}}.myapp")
      .register({{classname}}.class, service);
  }
{{/apis}}{{/apiInfo}}

  /**
   * This method constructs the router factory, mounts services and handlers and starts the http server with built router
   * @return
   */
  private Future<Void> startHttpServer() {
    Future<Void> future = Future.future();
    OpenAPI3RouterFactory.create(this.vertx, "/openapi.json", openAPI3RouterFactoryAsyncResult -> {
      if (openAPI3RouterFactoryAsyncResult.succeeded()) {
        OpenAPI3RouterFactory routerFactory = openAPI3RouterFactoryAsyncResult.result();

        // Mount services on event bus based on extensions
        routerFactory.mountServicesFromExtensions();

        // Generate the router
        Router router = routerFactory.getRouter();
        server = vertx.createHttpServer(new HttpServerOptions().setPort(8080).setHost("localhost"));
        server.requestHandler(router).listen(ar -> {
          // Error starting the HttpServer
          if (ar.succeeded()) future.complete();
          else future.fail(ar.cause());
        });
      } else {
        // Something went wrong during router factory initialization
        future.fail(openAPI3RouterFactoryAsyncResult.cause());
      }
    });
    return future;
  }

  @Override
  public void start(Future<Void> future) {
    {{#apiInfo}}{{#apis}}start{{classname}}();
    {{/apis}}{{/apiInfo}}
    startHttpServer().setHandler(future.completer());
  }

  /**
   * This method closes the http server and unregister all services loaded to Event Bus
   */
  @Override
  public void stop(){
    this.server.close();
{{#apiInfo}}{{#apis}}    consumer{{classname}}.unregister();
{{/apis}}{{/apiInfo}}
  }

}
